CODICE CodeX Saver Ver 0.3
#include "Code_Includes.h"
#include "Texture_Manager.h"
#include "Code_String.h"
#include "Render_Text.h"
#define NUM_STRING		60
void Render_Scene (void);
void Setup_GL (void);
void Setup_Texture (void);
void Setup_String (void);
void Resize_GL (int, int);
void Genesis_Mouse (int, int, int, int);
void Genesis_Keyboard (unsigned char, int, int);
void Genesis_Special_K (int, int, int);
void Kill_All (void);
void Calc_Frame_Rate (void);
// variabili globali della finestra
int screen_width = 800, screen_height = 600;
bool fullscreen = false;
float Frame_Interval = 0.0f;				// variabile in cui è memorizzato il tempo trascorso tra un frame e l'altro
char str_frame_rate[50] = {0};			// stringa per visualizzare gli fps
bool pause = false;
// variabili per il programma
String_Code string_mem[NUM_STRING];
// oggetti globali
Texture_Manager	TM;										// oggetto per la gestione delle texture
Code_String			CodeS;									// oggetto per la gestione del testo
Render_Text			Rend_Text;							// oggetto per il rendering del testo
void Render_Scene (void)
{
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glLoadIdentity();										// resetta la visuale
	glEnable (GL_BLEND);
	glColor4f (0.5f, 0.3f, 1.0f, 1.0f);
	TM.Usa_Texture (0);								// texture per il testo
	// disegna il testo
	for (int loop = 0; loop < NUM_STRING; loop++) {
		Rend_Text.Render_String (&string_mem[loop], Frame_Interval, pause);
		int leng = strlen (string_mem[loop].string) + 3;
		if ( (string_mem[loop].x_pos < (0 - (leng * 10))) && (string_mem[loop].x_vel < 0) )
			CodeS.Get_String (&string_mem[loop], rand()%(CODE_LENGTH - 1));
	}
	// calcola il frame rate e aggiorna lo schermo
	Calc_Frame_Rate ();
	glFlush ();
	glutSwapBuffers ();
}
void Setup_GL (void) {
	// setup finestra
	glClearColor (0.0f, 0.0f, 0.0f, 0.5f);											// sfondo nero
	glClearDepth (1.0f);																	// setup depth buffer
	glEnable (GL_TEXTURE_2D);													// enable texture mapping
	glEnable (GL_COLOR_MATERIAL);											// possibilità di colorare le texture attivata
	glBlendFunc (GL_SRC_ALPHA, GL_ONE);									// funzione per il blending
	glShadeModel (GL_SMOOTH);													// enable smooth shading
	glHint (GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST);	// calcolo prospettiva
	Resize_GL (screen_width, screen_height);
	srand(time(NULL));								// inizializza il generatore di numeri casuali
	Setup_Texture ();								// carica le texture
	Rend_Text.Build_Font ();						// costruisce le liste di visualizzazione del testo
	Setup_String ();
}
void Setup_Texture (void) {
	if (!(TM.LoadTGA ("Texture/text.tga")))
		MessageBox (NULL, "Errore Caricamento Texture", "ERROR", MB_OK | MB_ICONERROR);
}
void Setup_String (void) {
	for (int loop = 0; loop < NUM_STRING; loop++) {
		CodeS.Get_String (&string_mem[loop], rand()%(CODE_LENGTH - 1));
	}
}
int main (int argc, char** argv) {
	// inizializzazione della finestra
	glutInit (&argc, argv);
	glutInitDisplayMode (GLUT_DOUBLE | GLUT_RGBA | GLUT_DEPTH | GLUT_ALPHA);
	glutInitWindowSize (screen_width, screen_height);
	glutCreateWindow ("CodeX Saver 0.2");
	// setup finestra
	Setup_GL ();
	//glutFullScreen ();
	glutReshapeFunc (Resize_GL);
	// funzioni per la gestione della tastiera e del mouse
	glutKeyboardFunc (Genesis_Keyboard);
	glutSpecialFunc (Genesis_Special_K);
	glutMouseFunc (Genesis_Mouse);
	// funzioni di visualizzazione
	glutDisplayFunc (Render_Scene);
	glutIdleFunc (Render_Scene);
	glutMainLoop ();
	return 0;
}
void Resize_GL (int width, int height) {
	if (height == 0)									//se l'altezza è 0 diventa 1
		height = 1;
	glViewport (0, 0, width, height);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	glOrtho (0.0, (GLdouble) screen_width, 0.0, (GLdouble) screen_height, -50.0, 50.0);
	//gluPerspective(45.0f , (GLfloat) width / (GLfloat) height , 0.1f, 100.0f);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	screen_width = width;
	screen_height = height;
}
void Genesis_Mouse (int btn, int state, int x, int y) {
	//Kill_All ();
}
void Genesis_Keyboard (unsigned char c, int x, int y) {
	if (c == 'p')
		pause = !pause;
	else
		Kill_All ();
}
void Genesis_Special_K (int i, int x, int y) {
	if (i == GLUT_KEY_F1) {
		if (fullscreen) {
			glutReshapeWindow (800, 600);
			glutPositionWindow (20, 30);
		}
		else
			glutFullScreen ();
		fullscreen = !fullscreen;
	}
	else
		Kill_All ();
}
void Kill_All (void) {
	Rend_Text.Kill_Font ();
	int winID = glutGetWindow ();
	glutDestroyWindow (winID);
}
void Calc_Frame_Rate (void) {
	static float frame_per_second = 0.0f;				// variabile per gli fps
	static float last_time = 0.0f;							// variabile per il tempo dall'ultimo frame
	static float frame_time = 0.0f;						// tempo dell'ultimo frame
	float current_time = timeGetTime() * 0.001f;		// tempo del frame corrente
	Frame_Interval = current_time - frame_time;	// intervallo tra un frame e l'altro
	frame_time = current_time;
	++frame_per_second;
	if (current_time - last_time > 1.0f) {
		last_time = current_time;
		sprintf (str_frame_rate, "FPS: %d", int (frame_per_second));

		frame_per_second = 0;
	}
}
#include "Render_Text.h"
Render_Text::Render_Text ()
Render_Text::~Render_Text () {	}
void Render_Text::Render_String (String_Code *s, float frame, bool pause) {
	//glPrint (String_Code *s, int set)
	glPrint (s, 1);
	if (!pause)
		s -> x_pos += s -> x_vel * frame;
}
void Render_Text::Build_Font () {
	float cx, cy;
	base = glGenLists (256);
	for (int loop = 0; loop < 256; loop++) {
		cx = float(loop % 16) / 16.0f;
		cy = float(loop / 16) / 16.0f;
		glNewList (base + loop, GL_COMPILE);
			glBegin (GL_QUADS);
				glTexCoord2f(cx, 1-cy-0.0625f); 					// Texture Coord (Bottom Left)
				glVertex2i(0, 0); 										// Vertex Coord (Bottom Left)
				glTexCoord2f(cx+0.0625f, 1-cy-0.0625f); 		// Texture Coord (Bottom Right)
				glVertex2i(16, 0); 										// Vertex Coord (Bottom Right)
				glTexCoord2f(cx+0.0625f, 1-cy);					// Texture Coord (Top Right)
				glVertex2i(16, 16); 										// Vertex Coord (Top Right)
				glTexCoord2f(cx, 1-cy); 								// Texture Coord (Top Left)
				glVertex2i(0, 16); 										// Vertex Coord (Top Left)
			glEnd();
			glTranslated(10, 0, 0); 										// Move To The Right Of The Character
		glEndList();
	}
}
void Render_Text::Kill_Font () {
	glDeleteLists (base, 256);					// cancella le liste di visualizzazione
}
void Render_Text::glPrint (String_Code *s, int set) {
	if (set > 1)
		set = 1;
	glPushMatrix ();
		glTranslatef (s -> x_pos, s -> y_pos, 0);
		glListBase (base - 32 + (128 * set));
		if (strlen (s -> string) > 0) {
			glColor4f (0.8f, 0.8f, 1.0f, 1.0f);
			glCallLists (1, GL_BYTE, s -> string);
			glColor4f (0.5f, 0.3f, 1.0f, 1.0f);
			glCallLists (strlen (s -> string) - 1, GL_BYTE, s -> string + 1);
		}
	glPopMatrix ();
}
#include "Code_String.h"
Code_String::Code_String () {
	Setup_Code_Text ();
}
Code_String::~Code_String () {	}
void Code_String::Get_String (String_Code *temp, int string_num) {
	if (string_num > CODE_LENGTH - 1)
		string_num = CODE_LENGTH - 1;
	delete (temp -> string);
	temp -> string = (char*) calloc (strlen (codez_text[string_num]) + 1, sizeof (char));
	copystr (temp -> string, codez_text[string_num]);
	temp -> x_pos = float(rand()%25) + 800.0f;
	temp -> y_pos = float(rand()%1200) / 2.0f;
	temp -> z_pos = 0.0; //float(rand()%500) / 10.0f - 100.0f;
	temp -> x_vel = float(rand()%200) - 300.0f;
}
void Code_String::Setup_Code_Text (void) {
	char oneline[255] = "";			// variabile temporanea per la memorizzazione delle stringhe
	int length;
	FILE *filein = fopen ("Data/Source_Code.txt", "rt");
	// legge e memorizza le righe di codice
	for (int loop = 0; loop < CODE_LENGTH - 1; loop++) {
		readstr (filein, oneline);
		length = strlen (oneline);
		codez_text[loop] = (char*) calloc (length + 1, sizeof (char));
		copystr (codez_text[loop], oneline);
	}
	fclose (filein);				// chiude il file
}
void Code_String::readstr (FILE *filename, char *string) {
	fgets (string, 255, filename);
}
void Code_String::copystr (char* dest, char* source) {
	while ( *source != '\n' && *source != '\0') {
		if (*source != '\t')
			*dest = *source;
		dest ++;
		source ++;
	}
}